#include "include/prints.rud"

final var __isincluded__MEMORY_ = 34598;

function Array(len){

    var out;
    alloc(len)->out;
    return out;

}

function putValue(array, index, value){
    __asm{"
    mov rax, r11
    mov DWORD [r9+r10], eax  
    "}
}
function getValue(array, index){

    __asm{"
    
    mov eax, DWORD [r9+r10]
    mov r8, rax
    
    "}

}

function strAppend(stra, strb){

    var lena;
    var lenb;
    strlen(stra)->lena;
    strlen(strb)->lenb;
    var newlen = lena+lenb;
    var out;
    reallocate(stra, newlen)->out;
    __asm{"
    mov rdi, r8 ;reallocated
    mov rsi, r10;strb
    call strcat 
    sub rsp, 4
    mov r8, rax
    "}




}

function alloc(amt){

__asm{"

   xor r11, r11
   xor r12, r12
   mov rdi, r9
   call malloc
   xor r11, r11
   xor r12, r12
   add rsp, 4
   test rax, rax ; check for error

   mov byte[rax+r9], 0x0

   mov r8, rax


"}


}



function strcpy(destination, source){


    __asm{"
        
        xor r8, r8
        xor rax, rax
        _strcpy_top_loop:
        mov ax, word [r10 + r8]
        cmp ax, 0
        je _strcpy_end_loop
        mov word [r9+r8],ax
        inc r8
        jmp _strcpy_top_loop
        _strcpy_end_loop  :
    
    
    "}

}



function strlen(ptr){

    __asm{"
    
    xor r8,r8
    _strlen_top_loop:
    mov ax, word[r9+r8]
    cmp ax,0
    je _strlen_end_loop
    inc r8
    jmp _strlen_top_loop
    
    _strlen_end_loop:
    "}


}

function memerror(error){

    print_string("Memory error encountered");
    exit(error);

}

function destroy(ptr){
__asm{"

    mov rdi, r9
    call free
    sub rsp, 4

"}

}

function reallocate(ptr, newsize){

    __asm{
        "
        
        mov rdi, r9
        mov rsi, r10
        call realloc
        add rsp, 4
        mov r8, rax
        
        
        "
    }


}