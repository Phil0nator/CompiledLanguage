#define INFINITY 9223372036854775807
final var INF = 9223372036854775807;

final float FLT_NEGATIVE1 = -1.0;
final float FLT_ONE = 1.0;


final float EPSILON = 1.192092896e-32;
//pi
final float M_PI = 3.14159265358979323846;
// e
final float M_E = 2.71828182845904523536;
//log2(e)
final float M_LOG2E = 1.44269504088896340736;
//log10(e)
final float M_LOG10E = 0.434294481903251827651;
//ln(2)
final float M_LN2 = 0.693147180559945309417;
//pi/2
final float M_PI_2 = 1.57079632679489661923;
//pi/4
final float M_PI_4 = 0.785398163397448309616;
//1/pi
final float M_1_PI = 0.318309886183790671538;
//2/pi
final float M_2_PI = 0.636619772367581343076;
// 2 / sqrt(pi)
final float M_2_SQRTPI = 1.12837916709551257390;
// sqrt 2
final float M_SQRT2 = 1.41421356237309504880;
// 1 / sqrt(2)
final float M_SQRT1_2 = 0.707106781186547524401;



final float FLT_MAX = 2147483646.0;
final var INTMAX = MAX_INT;

function fast sqrtint(number){
    __asm{"
    mov r8, r9 ; copy initial value
    xor r10, r10; count
    xor r11, r11; sqrt
    __sqrtint_flp_0x0:
    sub r8, r10
    inc r10
    inc r10
    inc r11
    cmp r8, 0
    js __sqrtint_flp_0x0_end
    jnz __sqrtint_flp_0x0
    __sqrtint_flp_0x0_end:
    dec r11
    mov r8, r11
    "}
}

function fast powint(base, exponent){


    __asm{"
    
        mov rax, r9
        dec r10
        __powint__flp_0x0:
        mul r9
        dec r10
        cmp r10, 0
        jne __powint__flp_0x0
        mov r8, rax
    
    "}


}

function fast floor(float flt){


    __asm {"

        cvttss2si r8, xmm0
    
    "}

}


function fast round(float flt){

    __asm{"
    
        cvtss2si r8, xmm0

    "}

}

function fast toFloat(integer){

    __asm{"
    
        cvtsi2ss xmm8, r9
    
    "}

}

function fast ceil(float flt){


    __asm{"
    
        roundss xmm1, xmm0, 10B
        cvttss2si r8, xmm1

    "}

}

function fast sqrtflt(float flt){


    __asm{"
    
        sqrtss xmm8, xmm0

    "}


}

function __fmod(float f, float mod) float {

    float divided = f / mod;
    var trunced;
    floor(divided)->trunced;
    float out = f - (trunced * mod) ;
    return out;

}

function fast fmod(float f, float mod) float{

    __asm{"
    
    movss xmm15, xmm0
    divss xmm15, xmm1
    cvttss2si rax, xmm15
    cvtsi2ss xmm15, rax
    mulss xmm15, xmm1
    subss xmm0, xmm15
    movss xmm8, xmm0

    
    "}


}


function fast absint(x){
    __asm{"
        mov rax, r9
        sar rax, 63
        xor r9, rax
        sub r9, rax
        mov r8, r9

       
    "}


}

function fast fabs(float x) float {
    __asm{"
    
    mov rax, 1
    call fabsf
    movss xmm8, xmm0
    
    "}

}