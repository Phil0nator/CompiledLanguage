#include "include:memory.rud"

struct LLNode{

    var item;
    var next;

}


function LLNode.init(value){
    var n;
    LLNode()->n;
    n:item = value;
    n:next = 0;
    return n;
}

function LLNode.setValue(this, value){
    this:item=value;
}

function LLNode.buildNext(this, value){
    
    var n;

    this:next->n;
    LLNode.init(value)->n;
    this:next = n;
}

function LLNode.value(this){

    var v;
    this:item->v;
    return v;

}


function LLNode.next(this){

    var n;
    this:next->n;
    return n;

}

function LLNode.setConnection(this, newconnection){

    var old;
    this:next = newconnection;
    return old;

}

function LLNode.destroy(this){

    var n;
    this:next->n;
    destroy(this);
    return n;
}



struct LinkedList{

    var nodestart;
    var lastnode;
    var length;

}



function LinkedList.init(startervalue){
    var out;
    LinkedList()->out;
    var starter;
    LLNode.init(startervalue)->starter;
    out:nodestart=starter;
    return out;
}

function LinkedList.push(this, value){
    var node;
    LinkedList.getLastNode(this)->node;

    LLNode.buildNext(node, value);
}

function LinkedList.getLastNode(this){

    var node;
    this:nodestart->node;
    var second;
    
    for(var i; true;i++;){

        LLNode.next(node)->second;
        if(second == 0){
            break;
        }
        node = second;
    }
    return node;

}

function LinkedList.at(this, index){

    var sn;
    this:nodestart->sn;
    for(var i; i < index; i++;){

        LLNode.next(sn)->sn;
        

    }

    var out;
    LLNode.value(sn)->out;
    return out;

}


function LinkedList.nodeAt(this, index){
    var sn;
    this:nodestart->sn;
    if(index == 0){
        return sn;
    }
    for(var i; i < index; i++;){

        LLNode.next(sn)->sn;
        

    }

    return sn;
}


function LinkedList.set(this, index, value){

    var sn;
    this:nodestart->sn;
    if(index == 0){
        LLNode.setValue(sn,value);
        return 0;
    }

    index--;
    for(var i; i < index; i++;){

        LLNode.next(sn)->sn;

    }
    LLNode.setValue(sn, value);


}

function LinkedList.insertItem(this, index, value){


    var sn;
    this:nodestart->sn;
    var oldconnection;

    if(index == 0){
        
        LLNode.next(sn)->oldconnection;
        LLNode.buildNext(sn, value);
        LLNode.next(sn)->sn;
        LLNode.setConnection(sn, oldconnection);

        return 0;
    }

    index--;
    for(var i; i < index; i++;){

        LLNode.next(sn)->sn;

    }
    LLNode.next(sn)->oldconnection;
    LLNode.buildNext(sn, value);
    LLNode.next(sn)->sn;
    LLNode.setConnection(sn, oldconnection);


}

function LinkedList.insertOther(this, index, other){

    var sn;
    this:nodestart->sn;
    var oldconnection;

    if(index == 0){
        


        return 0;
    }

    //index--;
    for(var i; i < index; i++;){

        LLNode.next(sn)->sn;

    }
    LLNode.next(sn)->oldconnection;
    var current;
    LinkedList.nodeAt(other,0)->current;
    var val;
    for(var j; true; j++;){
        LLNode.value(current)->val;

        LLNode.buildNext(sn, val);
        LLNode.next(sn)->sn;

        LLNode.next(current)->current;
        if(current == 0){
            break;
        }

    }

    LLNode.setConnection(sn, oldconnection);




}


function LinkedList.printints(this){

    var node;
    this:nodestart->node;
    var v;
    var second;
    printformat("[ ");
    for(var i; true;i++;){
        LLNode.next(node)->second;
        if(second == 0){
            break;
        }
        
        LLNode.value(node)->v;
        printformat("%i, ",v);
        node = second;

    }
    LLNode.value(node)->v;
    printformat("%i ]\n", v);



}

function LinkedList.destroy(this){
    var sn;
    this:nodestart->sn;

    for(var i; true; i++;){
        print_integer(sn);
        LLNode.destroy(sn)->sn;
        print_integer(sn);
        if(sn == 0){
            return 0;
        }

    }
    destroy(this);



}