#include "include:memory.rud"

final var __PRINTFFLOAT = "%g";
final var __PRINTTRUE = "True";
final var __PRINTFALSE = "False";

function fast print_bool(b){

    __asm{"
    cmp r9, -1
    je __pb_istrue
    PRINT_STRING __PRINTFALSE
    leave
    ret
    __pb_istrue:
    PRINT_STRING __PRINTTRUE
    leave
    ret

    "}

}

function fast print_char(char){
    __asm{"
    PRINT_CHAR r9
    NEWLINE
    "}
}
function fast print_string(string){
    __asm{"
    PRINT_STRING [r9]
    NEWLINE
    "}
}


function fast print_integer(number){
    __asm{"
    PRINT_DEC 8, r9
    NEWLINE
    "}
}

function fast print_uint(number){
    __asm{"
    PRINT_UDEC 8, r9
    NEWLINE
    "}
}

function fast printformat(value, format){

    __asm{"
    
    push rax
    push rcx
    mov     rdi, r9                ; set 1st parameter (format)
    mov     rsi, r10                 ; set 2nd parameter (current_number)
    xor     rax, rax                ; because printf is varargs

    ; Stack is already aligned because we pushed three 8 byte registers
    call    printf                  ; printf(format, current_number)

    pop     rcx                     ; restore caller-save register
    pop     rax                     ; restore caller-save register
    FFLUSH_STDOUT
    "}

}


function fast print_two_formats(value, fa, fb){


    __asm{"
    
    push rax
    push rcx
    mov     rdi, r9                ; set 1st parameter (value)
    mov     rsi, r10                 ; set 2nd parameter (fa)
    mov     rdx, r11                ; set 3rd parameter (fb)
    xor     rax, rax                ; because printf is varargs

    ; Stack is already aligned because we pushed three 8 byte registers
    call    printf                  ; printf(format, current_number)

    pop     rcx                     ; restore caller-save register
    pop     rax                     ; restore caller-save register
    FFLUSH_STDOUT
    "}

}

function fast print_three_formats(value, fa, fb, fc){


    __asm{"
    
    push rax
    push rcx
    mov     rdi, r9                ; set 1st parameter (value)
    mov     rsi, r10                 ; set 2nd parameter (fa)
    mov     rdx, r11                ; set 3rd parameter (fb)
    mov     rcx, r12
    xor     rax, rax                ; because printf is varargs

    ; Stack is already aligned because we pushed three 8 byte registers
    call    printf                  ; printf(format, current_number)

    pop     rcx                     ; restore caller-save register
    pop     rax                     ; restore caller-save register
    FFLUSH_STDOUT
    "}

}


function fast print_formatfloat(value, float fa){
    var stackalign;
    __asm{"
    ALIGN_STACK
    mov     rdi, r9                ; set 1st parameter (format)
    cvtps2pd xmm0, xmm1
    mov rax, 1

    call    printf                  ; printf(format, current_number)

    FFLUSH_STDOUT
    ;add rsp, 12
    UNALIGN_STACK
    "}


}

function fast print_floatln(float flt){

    var stackalign;
    __asm{"


        ALIGN_STACK
        mov     rdi, __PRINTFFLOAT                ; set 1st parameter (format)
        cvtps2pd xmm0, xmm0
        mov rax, 1

        call    printf                  ; printf(format, current_number)

        NEWLINE
        ;add rsp, 12
        UNALIGN_STACK

    "}


}

function fast print_float(float flt){
    var stackalign;
   __asm{"

        ALIGN_STACK
        mov     rdi, __PRINTFFLOAT                ; set 1st parameter (format)
        cvtps2pd xmm0, xmm0
        mov rax, 1

        call    printf                  ; printf(format, current_number)

        FFLUSH_STDOUT
        ;add rsp, 12
        UNALIGN_STACK
    "}


}

function fast newline(){
    __asm{"
    NEWLINE
    "}
}