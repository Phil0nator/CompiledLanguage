#include "include/memory.rud"
#include "include/math.rud"
#include "include/prints.rud"
#include "include/string.rud"
#include "include/entryexit.rud"


var currentVector;

struct Vector{

    var array;
    var len;
    var pushpos;


}


function Vector.init(vec, len){

    var arr;
    Array(len)->arr;
    putValue(vec, 0, arr); //allocate array of len
    putValue(vec, 8, len); //store len
    putValue(vec, 16, 0);  //initialize pushpos to 0
    return vec;
}

function Vector.expand(vec){
    

    var len;
    getValue(currentVector, 8)->len;
    len = len + 1;
    putValue(currentVector, 8, len);
    var arr;
    getValue(currentVector, 0)->arr;
    var newarr;
    reallocate(arr, len*8)->newarr;
    
    putValue(currentVector,0, newarr);
    return len;


}

function Vector.push(vec, item){
    currentVector = vec;
    var arr;
    getValue(vec, 0)->arr;
    var pos;
    var len;
    getValue(vec, 16)->pos;
    getValue(vec, 8)->len;

    cmp(pos, len){

        >=:Vector.expand;

    }->len;

    putValue(vec, 8, len);
    
    getValue(vec, 0)->arr;
    putValue(arr, pos*8, item);
    pos = pos + 1;
    putValue(vec, 16, pos);

    
    return item;

}

function Vector.pop(vec){


    currentVector = vec;
    var arr;
    getValue(vec, 0)->arr;
    var pos;
    getValue(vec, 16)->pos;
    pos = pos-1;
    var out;
    getValue(arr, pos*8)->out;
    putValue(vec, 16, pos);
    return out;


}

function Vector.at(vec, index){

    var arr;
    getValue(vec, 0)->arr;
    var item;
    getValue(arr, index*8)->item;
    return item;

}

function Vector.set(vec, index, value){

    var arr;
    getValue(vec, 0)->arr;
    putValue(arr, index*8, value);

}

function Vector.print(vec){
    var arr;
    getValue(vec, 0)->arr;
    var len;
    getValue(vec, 8)->len;
    printformat("[ ", 0);
    var current_value;
    for(var i=0; len - 1;i++){

        getValue(arr, i*8)->current_value;
        printformat("%i, ",current_value);

    }
    len = len - 1;
    getValue(arr, len*8 )->current_value;
    printformat("%i ]\n",current_value);



}

function Vector.size(vec){

    var len;
    getValue(vec, 8)->len;
    return len;

}