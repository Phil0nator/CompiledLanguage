#include "include/memory.rud"
#include "include/math.rud"
#include "include/prints.rud"
#include "include/string.rud"
#include "include/entryexit.rud"


var currentVector;

struct Vector{

    var array;
    var len;
    var pushpos;
    var element_size;

}


function Vector.init(vec, len, size){

    var arr;
    alloc(len*size)->arr;
    vec:array = arr;
    vec:len = len;
    vec:pushpos = 0;
    vec:element_size = size;


    return vec;
}

function Vector.expand(vec){
    

    var len;
    currentVector:len->len;
    len = len + 1;
    currentVector:len = len;
    var arr;
    currentVector:array->arr;
    var newarr;
    var size;
    currentVector:element_size->size;
    reallocate(arr, len*size)->newarr;
    
    currentVector:array=newarr;
    return len;


}

function Vector.push(vec, item){
    currentVector = vec;
    var arr;
    vec:array->arr;
    var pos;
    var size;
    vec:element_size->size;
    var len;
    vec:pushpos->pos;
    vec:len->len;

    cmp(pos, len){

        >=:Vector.expand;

    }->len;

    vec:len = len;
    
    vec:array->arr;
    arr[pos*size] = item;
    pos = pos + 1;
    vec:pushpos=pos;

    
    return item;

}

function Vector.pop(vec){


    currentVector = vec;
    var arr;

    var size;
    vec:element_size->size;

    vec:array->arr;
    var pos;
    vec:pushpos->pos;
    pos = pos-1;
    var out;
    arr[pos*size]->out;
    vec:pushpos=pos;
    return out;


}

function Vector.at(vec, index){

    var arr;
    vec:array->arr;
    var item;
    var size;
    vec:element_size->size;
    arr[index*size]->item;
    return item;

}

function Vector.set(vec, index, value){

    var arr;
    var size;
    vec:element_size->size;
    vec:array->arr;
    arr [index*size]  = value;

}

function Vector.print(vec){
    var arr;
    vec:array->arr;
    var size;
    vec:element_size->size;
    var len;
    vec:len->len;
    printformat("[ ", 0);
    var current_value;
    for(var i=0; len - 1;i++){

        arr[i*size]->current_value;
        printformat("%i, ",current_value);

    }
    len = len - 1;
    arr[len*size]->current_value;
    printformat("%i ]\n",current_value);



}

function Vector.size(vec){

    var len;
    vec:len->len;
    return len;

}

function Vector.pushes(vec, newptr, newptr_len){

    
    var val;
    var addr;
    var size;
    vec:element_size->size;
    for(var i; newptr_len; i++ ;){
        addr= i*size;
        newptr[ addr]->val;
        Vector.push(vec,val);

    }


}