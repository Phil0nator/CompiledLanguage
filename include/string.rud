#include "include:memory.rud"
#include "include:prints.rud"
#include "include:Vector.rud"
struct String{

    var data;
    var len;


}


function fast toInt(str){

    __asm{"
    ALIGN_STACK
    mov rdi, r9
    call atoi
    mov r8, rax
    UNALIGN_STACK
    
    "}


}
function fast char(integer){

    __asm{"
    
        mov rax, r9
        xor rbx, rbx
        mov bl, al
        mov r8, rbx
    
    "}

}


function String.init(str,initial){

    var data;
    var len;
    strlen(initial)->len;
    
    alloc(len)->data;

    cmp(data, nullptr){
        == : memerror;
    }

    strcpy(data, initial);
    str:data = data;
    str:len = len;
    return str;

}

function String.charAt(str, index){

    var data;
    str:data->data;
    var ch;
    data[index]->ch;
    char(ch)->ch;
    return ch;


}
function String.printable(str){

    var data;
    str:data->data;
    return data;

}
function String.append_string(str, strb){

    var data;
    str:data->data;
    var second_data;
    strb:data->second_data;
    strAppend(data, second_data)->data;
    str:data = data;
    return data;


}

function String.append_chars(str, chars){

    var data;
    str:data->data;
    strAppend(data, chars)->data;
    str:data=data;
    return data;


}

function String.destroy(str){
    var data;
    str:data->data;
    destroy(data);
    destroy(str);
    return 0;
}

function String.length(this){
    var len;
    this:len->len;
    return len;

}
function String.print(this){

    var data;
    this:data->data;
    printformat(data, 0);

}

function String.println(this){

    var data;
    this:data->data;
    print_string(data);

}

function String.substring(this, start, end){

    var data;
    this:data->data;
    var newlen = end-start;
    var newdata;
    alloc(newlen)->newdata;
    var ch;
    for(var i = 0; i < newlen; i++; ){
        data[start+i]->ch;
        newdata[i] =ch;
        
    }
    newdata[newlen]=0;
    var out;
    String()->out;
    out:len = newlen;
    out:data = newdata;
    return out;



}


function String.find_str(this, other){


    var len;
    this:len->len;
    var otherlen;
    other:len->otherlen;
    var ch;
    var tch;
    var checked = 0;
    otherlen--;
    
    for(var i; i < len-otherlen; i++;){

        for(var j = 0; j < otherlen; j++;){

            String.charAt(this, i+j)->ch;
            String.charAt(other, j)->tch;
            if(ch == tch){
                checked++;
            }

        }

        if(checked == (otherlen+1)){

            return i;

        }
        checked =0;


    }

    return -1;

}
function String.find_chars(this, chars){

    var temp;
    String()->temp;
    String.init(temp, chars);
    var idx;
    String.find_str(this, temp)->idx;
    String.destroy(temp);
    return idx;

}

function String.count_str(this, other){


    var len;
    this:len->len;
    var otherlen;
    other:len->otherlen;
    var ch;
    var tch;
    var checked = 0;
    otherlen--;

    var count;
    
    for(var i; i < len-otherlen; i++;){

        for(var j = 0; j < otherlen; j++;){

            String.charAt(this, i+j)->ch;
            String.charAt(other, j)->tch;
            if(ch == tch){
                checked++;
            }

        }
        if(checked == (otherlen+1)){

            count++;
            

        }
        checked =0;


    }

    return count;


}



function String.copy(this){

    var d;
    this:data->d;
    var out;
    String()->out;
    String.init(out, d);
    return out;


}


function String.replace(this, old, new){
    var data;
    this:data->data;
    var len;
    this:len->len;
    var oldlen;
    strlen(old)->oldlen;
    var newlen;
    strlen(new)->newlen;
    var loc;

    
    

    String.find_chars(this, old)->loc;
    print_integer(loc);
    var first;

    var second;

    String.substring(this, 0, loc+1)->first;
    String.substring(this, loc+oldlen, len)->second;
    String.println(first);
    String.append_chars(first, new);
    String.append_string(first, second);
    String.destroy(second);
    destroy(data);
    first:data->data;
    this:data = data;
    return 0;

}








function fast stringcat(reallocated, strb){

__asm{"
    mov rdi, r9 ;reallocated
    mov rsi, r10;strb
    call strcat 
    xor r10, r10
    xor r11, r11 ;gc
    xor r12, r12
    add rsp, 4
    mov r8, rax
    "}

}




function fast strcpy(destination, source){


    __asm{"
        
        xor r8, r8
        xor rax, rax
        _strcpy_top_loop:
        mov ax, word [r10 + r8]
        cmp ax, 0
        je _strcpy_end_loop
        mov word [r9+r8],ax
        inc r8
        jmp _strcpy_top_loop
        _strcpy_end_loop  :
    
    
    "}

}



function fast strlen(ptr){

    __asm{"
    
    xor r8,r8
    _strlen_top_loop:
    mov ax, word[r9+r8]
    cmp ax,0
    je _strlen_end_loop
    inc r8
    jmp _strlen_top_loop
    
    _strlen_end_loop:
    "}


}



function strAppend(stra, strb){

    var lena;
    var lenb;
    strlen(stra)->lena;
    strlen(strb)->lenb;
    var newlen = (lena+lenb)+1;
    var out;
    reallocate(stra, newlen)->out;
    cmp(out, nullptr){
        ==:memerror;
    }
    stringcat(out, strb)->out;
    return out;




}