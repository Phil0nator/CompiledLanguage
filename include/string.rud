#include "include:memory.rud"

struct String{

    var data;
    var len;


}


function fast toInt(str){

    __asm{"
    ALIGN_STACK
    mov rdi, r9
    call atoi
    mov r8, rax
    UNALIGN_STACK
    
    "}


}



function String.init(str,initial){

    var data;
    var len;
    strlen(initial)->len;
    
    alloc(len)->data;

    cmp(data, nullptr){
        == : memerror;
    }

    strcpy(data, initial);
    str:data = data;
    str:len = len;
    return str;

}

function String.charAt(str, index){

    var data;
    str:data->data;
    var ch;
    data[index]->ch;
    return ch;


}
function String.printable(str){

    var data;
    str:data->data;
    return data;

}
function String.append_string(str, strb){

    var data;
    str:data->data;
    var second_data;
    strb:data->second_data;
    strAppend(data, second_data)->data;
    str:data = data;
    return data;


}

function String.append_chars(str, chars){

    var data;
    str:data->data;
    strAppend(data, chars)->data;
    str:data=data;
    return data;


}

function String.destroy(str){
    var data;
    str:data->data;
    destroy(data);
    destroy(str);
    return 0;
}

function String.length(this){
    var len;
    this:len->len;
    return len;

}

function fast stringcat(reallocated, strb){

__asm{"
    mov rdi, r9 ;reallocated
    mov rsi, r10;strb
    call strcat 
    xor r10, r10
    xor r11, r11 ;gc
    xor r12, r12
    add rsp, 4
    mov r8, rax
    "}

}




function fast strcpy(destination, source){


    __asm{"
        
        xor r8, r8
        xor rax, rax
        _strcpy_top_loop:
        mov ax, word [r10 + r8]
        cmp ax, 0
        je _strcpy_end_loop
        mov word [r9+r8],ax
        inc r8
        jmp _strcpy_top_loop
        _strcpy_end_loop  :
    
    
    "}

}



function fast strlen(ptr){

    __asm{"
    
    xor r8,r8
    _strlen_top_loop:
    mov ax, word[r9+r8]
    cmp ax,0
    je _strlen_end_loop
    inc r8
    jmp _strlen_top_loop
    
    _strlen_end_loop:
    "}


}



function strAppend(stra, strb){

    var lena;
    var lenb;
    strlen(stra)->lena;
    strlen(strb)->lenb;
    var newlen = (lena+lenb)+1;
    var out;
    reallocate(stra, newlen)->out;
    cmp(out, nullptr){
        ==:memerror;
    }
    stringcat(out, strb)->out;
    return out;




}